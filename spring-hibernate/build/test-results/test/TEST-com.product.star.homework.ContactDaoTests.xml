<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.product.star.homework.ContactDaoTests" tests="6" skipped="0" failures="0" errors="0" timestamp="2023-08-20T19:23:40" hostname="DESKTOP-A9C5UGQ" time="0.324">
  <properties/>
  <testcase name="addContact()" classname="com.product.star.homework.ContactDaoTests" time="0.162"/>
  <testcase name="getAllContacts()" classname="com.product.star.homework.ContactDaoTests" time="0.096"/>
  <testcase name="updateEmail()" classname="com.product.star.homework.ContactDaoTests" time="0.023"/>
  <testcase name="deleteContact()" classname="com.product.star.homework.ContactDaoTests" time="0.016"/>
  <testcase name="updatePhoneNumber()" classname="com.product.star.homework.ContactDaoTests" time="0.014"/>
  <testcase name="getContact()" classname="com.product.star.homework.ContactDaoTests" time="0.01"/>
  <system-out><![CDATA[Hibernate: 
    
    drop table if exists CONTACT cascade
Hibernate: 
    
    create table CONTACT (
       id  bigserial not null,
        email varchar(255) not null,
        name varchar(255) not null,
        phone_number varchar(255) not null,
        surname varchar(255) not null,
        primary key (id)
    )
Hibernate: 
    insert 
    into
        CONTACT
        (email, name, phone_number, surname) 
    values
        (?, ?, ?, ?)
Hibernate: 
    insert 
    into
        CONTACT
        (email, name, phone_number, surname) 
    values
        (?, ?, ?, ?)
Hibernate: 
    insert 
    into
        CONTACT
        (email, name, phone_number, surname) 
    values
        (?, ?, ?, ?)
Hibernate: 
    select
        contact0_.id as id1_0_0_,
        contact0_.email as email2_0_0_,
        contact0_.name as name3_0_0_,
        contact0_.phone_number as phone_nu4_0_0_,
        contact0_.surname as surname5_0_0_ 
    from
        CONTACT contact0_ 
    where
        contact0_.id=?
Hibernate: 
    select
        contact0_.id as id1_0_0_,
        contact0_.email as email2_0_0_,
        contact0_.name as name3_0_0_,
        contact0_.phone_number as phone_nu4_0_0_,
        contact0_.surname as surname5_0_0_ 
    from
        CONTACT contact0_ 
    where
        contact0_.id=?
Hibernate: 
    delete 
    from
        CONTACT 
    where
        id=?
Hibernate: 
    select
        contact0_.id as id1_0_0_,
        contact0_.email as email2_0_0_,
        contact0_.name as name3_0_0_,
        contact0_.phone_number as phone_nu4_0_0_,
        contact0_.surname as surname5_0_0_ 
    from
        CONTACT contact0_ 
    where
        contact0_.id=?
Hibernate: 
    delete 
    from
        CONTACT 
    where
        id=?
Hibernate: 
    insert 
    into
        CONTACT
        (email, name, phone_number, surname) 
    values
        (?, ?, ?, ?)
Hibernate: 
    insert 
    into
        CONTACT
        (email, name, phone_number, surname) 
    values
        (?, ?, ?, ?)
Hibernate: 
    select
        contact0_.id as id1_0_,
        contact0_.email as email2_0_,
        contact0_.name as name3_0_,
        contact0_.phone_number as phone_nu4_0_,
        contact0_.surname as surname5_0_ 
    from
        CONTACT contact0_
Hibernate: 
    select
        contact0_.id as id1_0_0_,
        contact0_.email as email2_0_0_,
        contact0_.name as name3_0_0_,
        contact0_.phone_number as phone_nu4_0_0_,
        contact0_.surname as surname5_0_0_ 
    from
        CONTACT contact0_ 
    where
        contact0_.id=?
Hibernate: 
    delete 
    from
        CONTACT 
    where
        id=?
Hibernate: 
    select
        contact0_.id as id1_0_0_,
        contact0_.email as email2_0_0_,
        contact0_.name as name3_0_0_,
        contact0_.phone_number as phone_nu4_0_0_,
        contact0_.surname as surname5_0_0_ 
    from
        CONTACT contact0_ 
    where
        contact0_.id=?
Hibernate: 
    delete 
    from
        CONTACT 
    where
        id=?
Hibernate: 
    insert 
    into
        CONTACT
        (email, name, phone_number, surname) 
    values
        (?, ?, ?, ?)
Hibernate: 
    insert 
    into
        CONTACT
        (email, name, phone_number, surname) 
    values
        (?, ?, ?, ?)
Hibernate: 
    insert 
    into
        CONTACT
        (email, name, phone_number, surname) 
    values
        (?, ?, ?, ?)
Hibernate: 
    select
        contact0_.id as id1_0_0_,
        contact0_.email as email2_0_0_,
        contact0_.name as name3_0_0_,
        contact0_.phone_number as phone_nu4_0_0_,
        contact0_.surname as surname5_0_0_ 
    from
        CONTACT contact0_ 
    where
        contact0_.id=?
Hibernate: 
    update
        CONTACT 
    set
        email=?,
        name=?,
        phone_number=?,
        surname=? 
    where
        id=?
Hibernate: 
    select
        contact0_.id as id1_0_0_,
        contact0_.email as email2_0_0_,
        contact0_.name as name3_0_0_,
        contact0_.phone_number as phone_nu4_0_0_,
        contact0_.surname as surname5_0_0_ 
    from
        CONTACT contact0_ 
    where
        contact0_.id=?
Hibernate: 
    select
        contact0_.id as id1_0_0_,
        contact0_.email as email2_0_0_,
        contact0_.name as name3_0_0_,
        contact0_.phone_number as phone_nu4_0_0_,
        contact0_.surname as surname5_0_0_ 
    from
        CONTACT contact0_ 
    where
        contact0_.id=?
Hibernate: 
    delete 
    from
        CONTACT 
    where
        id=?
Hibernate: 
    select
        contact0_.id as id1_0_0_,
        contact0_.email as email2_0_0_,
        contact0_.name as name3_0_0_,
        contact0_.phone_number as phone_nu4_0_0_,
        contact0_.surname as surname5_0_0_ 
    from
        CONTACT contact0_ 
    where
        contact0_.id=?
Hibernate: 
    delete 
    from
        CONTACT 
    where
        id=?
Hibernate: 
    insert 
    into
        CONTACT
        (email, name, phone_number, surname) 
    values
        (?, ?, ?, ?)
Hibernate: 
    insert 
    into
        CONTACT
        (email, name, phone_number, surname) 
    values
        (?, ?, ?, ?)
Hibernate: 
    insert 
    into
        CONTACT
        (email, name, phone_number, surname) 
    values
        (?, ?, ?, ?)
Hibernate: 
    select
        contact0_.id as id1_0_0_,
        contact0_.email as email2_0_0_,
        contact0_.name as name3_0_0_,
        contact0_.phone_number as phone_nu4_0_0_,
        contact0_.surname as surname5_0_0_ 
    from
        CONTACT contact0_ 
    where
        contact0_.id=?
Hibernate: 
    delete 
    from
        CONTACT 
    where
        id=?
Hibernate: 
    select
        contact0_.id as id1_0_0_,
        contact0_.email as email2_0_0_,
        contact0_.name as name3_0_0_,
        contact0_.phone_number as phone_nu4_0_0_,
        contact0_.surname as surname5_0_0_ 
    from
        CONTACT contact0_ 
    where
        contact0_.id=?
Hibernate: 
    select
        contact0_.id as id1_0_0_,
        contact0_.email as email2_0_0_,
        contact0_.name as name3_0_0_,
        contact0_.phone_number as phone_nu4_0_0_,
        contact0_.surname as surname5_0_0_ 
    from
        CONTACT contact0_ 
    where
        contact0_.id=?
Hibernate: 
    delete 
    from
        CONTACT 
    where
        id=?
Hibernate: 
    select
        contact0_.id as id1_0_0_,
        contact0_.email as email2_0_0_,
        contact0_.name as name3_0_0_,
        contact0_.phone_number as phone_nu4_0_0_,
        contact0_.surname as surname5_0_0_ 
    from
        CONTACT contact0_ 
    where
        contact0_.id=?
Hibernate: 
    delete 
    from
        CONTACT 
    where
        id=?
Hibernate: 
    insert 
    into
        CONTACT
        (email, name, phone_number, surname) 
    values
        (?, ?, ?, ?)
Hibernate: 
    insert 
    into
        CONTACT
        (email, name, phone_number, surname) 
    values
        (?, ?, ?, ?)
Hibernate: 
    insert 
    into
        CONTACT
        (email, name, phone_number, surname) 
    values
        (?, ?, ?, ?)
Hibernate: 
    select
        contact0_.id as id1_0_0_,
        contact0_.email as email2_0_0_,
        contact0_.name as name3_0_0_,
        contact0_.phone_number as phone_nu4_0_0_,
        contact0_.surname as surname5_0_0_ 
    from
        CONTACT contact0_ 
    where
        contact0_.id=?
Hibernate: 
    update
        CONTACT 
    set
        email=?,
        name=?,
        phone_number=?,
        surname=? 
    where
        id=?
Hibernate: 
    select
        contact0_.id as id1_0_0_,
        contact0_.email as email2_0_0_,
        contact0_.name as name3_0_0_,
        contact0_.phone_number as phone_nu4_0_0_,
        contact0_.surname as surname5_0_0_ 
    from
        CONTACT contact0_ 
    where
        contact0_.id=?
Hibernate: 
    select
        contact0_.id as id1_0_0_,
        contact0_.email as email2_0_0_,
        contact0_.name as name3_0_0_,
        contact0_.phone_number as phone_nu4_0_0_,
        contact0_.surname as surname5_0_0_ 
    from
        CONTACT contact0_ 
    where
        contact0_.id=?
Hibernate: 
    delete 
    from
        CONTACT 
    where
        id=?
Hibernate: 
    select
        contact0_.id as id1_0_0_,
        contact0_.email as email2_0_0_,
        contact0_.name as name3_0_0_,
        contact0_.phone_number as phone_nu4_0_0_,
        contact0_.surname as surname5_0_0_ 
    from
        CONTACT contact0_ 
    where
        contact0_.id=?
Hibernate: 
    delete 
    from
        CONTACT 
    where
        id=?
Hibernate: 
    insert 
    into
        CONTACT
        (email, name, phone_number, surname) 
    values
        (?, ?, ?, ?)
Hibernate: 
    insert 
    into
        CONTACT
        (email, name, phone_number, surname) 
    values
        (?, ?, ?, ?)
Hibernate: 
    select
        contact0_.id as id1_0_0_,
        contact0_.email as email2_0_0_,
        contact0_.name as name3_0_0_,
        contact0_.phone_number as phone_nu4_0_0_,
        contact0_.surname as surname5_0_0_ 
    from
        CONTACT contact0_ 
    where
        contact0_.id=?
Hibernate: 
    select
        contact0_.id as id1_0_0_,
        contact0_.email as email2_0_0_,
        contact0_.name as name3_0_0_,
        contact0_.phone_number as phone_nu4_0_0_,
        contact0_.surname as surname5_0_0_ 
    from
        CONTACT contact0_ 
    where
        contact0_.id=?
Hibernate: 
    delete 
    from
        CONTACT 
    where
        id=?
Hibernate: 
    select
        contact0_.id as id1_0_0_,
        contact0_.email as email2_0_0_,
        contact0_.name as name3_0_0_,
        contact0_.phone_number as phone_nu4_0_0_,
        contact0_.surname as surname5_0_0_ 
    from
        CONTACT contact0_ 
    where
        contact0_.id=?
Hibernate: 
    delete 
    from
        CONTACT 
    where
        id=?
]]></system-out>
  <system-err><![CDATA[Aug 20, 2023 10:23:38 PM org.springframework.test.context.support.AbstractTestContextBootstrapper getDefaultTestExecutionListenerClassNames
INFO: Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.event.ApplicationEventsTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener]
Aug 20, 2023 10:23:38 PM org.springframework.test.context.support.AbstractTestContextBootstrapper getTestExecutionListeners
INFO: Using TestExecutionListeners: [org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@4af0e741, org.springframework.test.context.event.ApplicationEventsTestExecutionListener@5442e868, org.springframework.test.context.support.DependencyInjectionTestExecutionListener@33a32ebb, org.springframework.test.context.support.DirtiesContextTestExecutionListener@4b0cb753, org.springframework.test.context.event.EventPublishingTestExecutionListener@60b9b9c]
Aug 20, 2023 10:23:39 PM org.hibernate.Version logVersion
INFO: HHH000412: Hibernate ORM core version 5.4.27.Final
Aug 20, 2023 10:23:39 PM org.hibernate.annotations.common.reflection.java.JavaReflectionManager <clinit>
INFO: HCANN000001: Hibernate Commons Annotations {5.1.2.Final}
Aug 20, 2023 10:23:39 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl configure
WARN: HHH10001002: Using Hibernate built-in connection pool (not for production use!)
Aug 20, 2023 10:23:39 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001005: using driver [org.postgresql.Driver] at URL [jdbc:postgresql://localhost:5432/productstar]
Aug 20, 2023 10:23:39 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001001: Connection properties: {password=****, user=postgres}
Aug 20, 2023 10:23:39 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl buildCreator
INFO: HHH10001003: Autocommit mode: false
Aug 20, 2023 10:23:39 PM org.hibernate.engine.jdbc.connections.internal.DriverManagerConnectionProviderImpl$PooledConnections <init>
INFO: HHH000115: Hibernate connection pool size: 20 (min=1)
Aug 20, 2023 10:23:39 PM org.hibernate.dialect.Dialect <init>
INFO: HHH000400: Using dialect: org.hibernate.dialect.PostgreSQL95Dialect
Aug 20, 2023 10:23:40 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@408c71ac] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
Aug 20, 2023 10:23:40 PM org.hibernate.resource.transaction.backend.jdbc.internal.DdlTransactionIsolatorNonJtaImpl getIsolatedConnection
INFO: HHH10001501: Connection obtained from JdbcConnectionAccess [org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess@199a5a9d] for (non-JTA) DDL execution was not in auto-commit mode; the Connection 'local transaction' will be committed and the Connection will be set into auto-commit mode.
Aug 20, 2023 10:23:40 PM org.hibernate.engine.transaction.jta.platform.internal.JtaPlatformInitiator initiateService
INFO: HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
]]></system-err>
</testsuite>
